{"ast":null,"code":"import { usersAPI } from '../api/api';\nimport { updateObjectInArray } from '../utils/object-helpers';\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: true\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: false\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // action creators\n\n\nexport const followSuccessAC = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccessAC = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPageAC = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage: currentPage\n}); // currentPage == currentPage: currentPage\n\nexport const setTotalUsersCountAC = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count: totalUsersCount\n});\nexport const toggleIsFetchingAC = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgressAC = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n}); // thunk creators\n\nexport const getUsersThunkCreator = (requestedPage, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsFetchingAC(true));\n    dispatch(setCurrentPageAC(requestedPage));\n    const data = await usersAPI.getUsers(requestedPage, pageSize);\n    dispatch(toggleIsFetchingAC(false));\n    dispatch(setUsersAC(data.items));\n    dispatch(setTotalUsersCountAC(data.totalCount));\n  };\n};\n\nconst followFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgressAC(true, userId));\n  const response = await apiMethod(userId);\n\n  if (response.data.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleFollowingProgressAC(false, userId));\n};\n\nexport const follow = userId => {\n  return async dispatch => {\n    let apiMethod = usersAPI.follow.bind(usersAPI);\n    followFlow(dispatch, userId, apiMethod, followSuccessAC);\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    let apiMethod = usersAPI.unfollow.bind(usersAPI);\n    followFlow(dispatch, userId, apiMethod, unfollowSuccessAC);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/home/aslambeq/skills/my-app/src/redux/users-reducer.js"],"names":["usersAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","userId","followed","count","filter","id","followSuccessAC","unfollowSuccessAC","setUsersAC","setCurrentPageAC","setTotalUsersCountAC","toggleIsFetchingAC","toggleFollowingProgressAC","getUsersThunkCreator","requestedPage","dispatch","data","getUsers","items","totalCount","followFlow","apiMethod","actionCreator","response","resultCode","follow","bind","unfollow"],"mappings":"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","sourcesContent":["import { usersAPI } from '../api/api'\r\nimport { updateObjectInArray } from '../utils/object-helpers'\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS'\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id) => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\n\r\nexport const followSuccessAC = (userId) => ({ type: FOLLOW, userId })\r\nexport const unfollowSuccessAC = (userId) => ({ type: UNFOLLOW, userId })\r\nexport const setUsersAC = (users) => ({ type: SET_USERS, users })\r\nexport const setCurrentPageAC = (currentPage) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage: currentPage\r\n}) // currentPage == currentPage: currentPage\r\nexport const setTotalUsersCountAC = (totalUsersCount) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n})\r\nexport const toggleIsFetchingAC = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching })\r\nexport const toggleFollowingProgressAC = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\n// thunk creators\r\n\r\nexport const getUsersThunkCreator = (requestedPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true))\r\n        dispatch(setCurrentPageAC(requestedPage))\r\n\r\n        const data = await usersAPI.getUsers(requestedPage, pageSize)\r\n        dispatch(toggleIsFetchingAC(false))\r\n        dispatch(setUsersAC(data.items))\r\n        dispatch(setTotalUsersCountAC(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgressAC(true, userId))\r\n\r\n    const response = await apiMethod(userId)\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgressAC(false, userId))\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.follow.bind(usersAPI)\r\n        followFlow(dispatch, userId, apiMethod, followSuccessAC)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n        followFlow(dispatch, userId, apiMethod, unfollowSuccessAC)\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n"]},"metadata":{},"sourceType":"module"}