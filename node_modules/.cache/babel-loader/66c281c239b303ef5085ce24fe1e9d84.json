{"ast":null,"code":"import { authAPI } from '../api/api';\nimport { stopSubmit } from 'redux-form';\nconst SET_USER_DATA = 'SET-USER-DATA';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n}; // thunk creators\n\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  return authAPI.me().then(response => {\n    // return (promise)\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : 'err0r';\n      dispatch(stopSubmit('login', {\n        _error: message\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/aslambeq/skills/my-app/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","response","data","resultCode","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAKJ;AACI,aAAOH,KAAP;AARR;AAUH,CAXD,C,CAaA;;;AAEA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,MAA+B;AAC1DI,EAAAA,IAAI,EAAET,aADoD;AAE1DU,EAAAA,OAAO,EAAE;AAAER,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB;AAFiD,CAA/B,CAAxB;AAKP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/C,SAAOf,OAAO,CAACgB,EAAR,GAAaC,IAAb,CAAmBC,QAAD,IAAc;AAAK;AACxC,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAI;AAAEhB,QAAAA,EAAF;AAAMC,QAAAA,KAAN;AAAaC,QAAAA;AAAb,UAAuBY,QAAQ,CAACC,IAAT,CAAcA,IAAzC;AACAJ,MAAAA,QAAQ,CAACF,eAAe,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,GALM,CAAP;AAMH,CAPM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAChEf,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EAA2CL,IAA3C,CAAiDC,QAAD,IAAc;AAC1D,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,KAFD,MAEO;AACH,UAAIS,OAAO,GACPL,QAAQ,CAACC,IAAT,CAAcK,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GACMP,QAAQ,CAACC,IAAT,CAAcK,QAAd,CAAuB,CAAvB,CADN,GAEM,OAHV;AAIAT,MAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAEyB,QAAAA,MAAM,EAAEH;AAAV,OAAV,CAAX,CAAR;AACH;AACJ,GAVD;AAWH,CAZM;AAcP,OAAO,MAAMI,MAAM,GAAG,MAAOZ,QAAD,IAAc;AACtCf,EAAAA,OAAO,CAAC2B,MAAR,GAAiBV,IAAjB,CAAuBC,QAAD,IAAc;AAChC,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GAJD;AAKH,CANM;AAQP,eAAeL,WAAf","sourcesContent":["import { authAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\n\r\nconst SET_USER_DATA = 'SET-USER-DATA'\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunk creators\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: { id, email, login, isAuth },\r\n})\r\n\r\nexport const getAuthUserData = () => (dispatch) => {\r\n    return authAPI.me().then((response) => {    // return (promise)\r\n        if (response.data.resultCode === 0) {\r\n            let { id, email, login } = response.data.data\r\n            dispatch(setAuthUserData(id, email, login, true))\r\n        }\r\n    })\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe).then((response) => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            let message =\r\n                response.data.messages.length > 0\r\n                    ? response.data.messages[0]\r\n                    : 'err0r'\r\n            dispatch(stopSubmit('login', { _error: message }))\r\n        }\r\n    })\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    authAPI.logout().then((response) => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    })\r\n}\r\n\r\nexport default authReducer\r\n"]},"metadata":{},"sourceType":"module"}